<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[Python] Matplotlib]]></title>
    <url>%2F2018%2F11%2F10%2FPython-Matplotlib%2F</url>
    <content type="text"><![CDATA[Installation (MacOS) install python brew install python3 install numpy pip3 install numpy install matplotlib pip3 install matplotlib Basic UsageDraw a figure12345678import numpy as npimport matplotlib.pyplot as pltx = np.linspace(-1, 1, 50) # the range is [-1, 1] and the number of points is 50.y = 2*x+1 # set the line's function.plt.figure() # create a figure window.plt.plot(x, y) # draw the line in figure.plt.show() # display the figure and lline. Set the attribute of the figure and line12345678910import numpy as npimport matplotlib.pyplot as pltx = np.linspace(-3, 3, 50) y1 = 2*x+1 y2 = x**2plt.figure(num=3, figsize=(6,4)) # set the No. and size of the figureplt.plot(x, y1, color='green', linewidth='1.0') # set the attribute of the line.plt.plot(x, y2, color='red', linewidth='2.0', linestyle='--') plt.show() Set the attribute of the axisSet label1234567891011121314import numpy as npimport matplotlib.pyplot as pltx = np.linspace(-3, 3, 50) y1 = 2*x+1 y2 = x**2plt.figure() plt.plot(x, y1, color='red', linewidth='1.0') plt.plot(x, y2, color='blue', linewidth='2.0', linestyle='--') plt.xlim((-2, 2)) # set the limit range of axisplt.ylim((-3, 3))plt.xlabel('x label') # set the label of axisplt.ylabel('y label') plt.show() Customize the axis1234567891011121314import numpy as npimport matplotlib.pyplot as pltx = np.linspace(-3, 3, 50) y1 = 2*x+1 y2 = x**2plt.figure() plt.plot(x, y1, color='red', linewidth='1.0') plt.plot(x, y2, color='blue', linewidth='2.0', linestyle='--') plt.xlim((-1, 2))plt.ylim((-2, 3))plt.xticks(np.linspace(-1, 2, 5)) # Set the x-axis scale.plt.yticks([-2, -1.8, -1, 1.22, 3],[r'$really\ bad$', r'$bad$', r'$normal$', r'$good$', r'$really\ good$']) # Set the y-axis scale and name.plt.show() Adjust axis infomation1234567891011121314151617import numpy as npimport matplotlib.pyplot as pltx = np.linspace(-3, 3, 50) y1 = 2*x+1 y2 = x**2plt.figure() plt.plot(x, y1, color='red', linewidth='1.0') plt.plot(x, y2, color='blue', linewidth='2.0', linestyle='--') plt.xlim((-1, 2))plt.ylim((-2, 3))plt.xticks(np.linspace(-1, 2, 5)) plt.yticks([-2, -1.8, -1, 1.22, 3],[r'$really\ bad$', r'$bad$', r'$normal$', r'$good$', r'$really\ good$']) ax_info = plt.gca() # Get the axis infomation.ax_info.spines['right'].set_color('none') # Set axis frame.ax_info.spines['top'].set_color('none')plt.show() Adjust position123456789101112131415161718192021import numpy as npimport matplotlib.pyplot as pltx = np.linspace(-3, 3, 50) y1 = 2*x+1 y2 = x**2plt.figure() plt.plot(x, y1, color='red', linewidth='1.0') plt.plot(x, y2, color='blue', linewidth='2.0', linestyle='--') plt.xlim((-1, 2))plt.ylim((-2, 3))plt.xticks(np.linspace(-1, 2, 5)) plt.yticks([-2, -1.8, -1, 1.22, 3],[r'$really\ bad$', r'$bad$', r'$normal$', r'$good$', r'$really\ good$']) ax_info = plt.gca()ax_info.spines['right'].set_color('none') ax_info.spines['top'].set_color('none')ax_info.xaxis.set_ticks_position('bottom') # Set x-axis as frameax_info.spines['bottom'].set_position(('data', 0)) # Set y axis positionax_info.yaxis.set_ticks_position('left')ax_info.spines['left'].set_position(('data',0))plt.show() Add legend123456789101112131415import numpy as npimport matplotlib.pyplot as pltx = np.linspace(-3, 3, 50) y1 = 2*x+1 y2 = x**2plt.figure() plt.xlim((-1, 2))plt.ylim((-2, 3))plt.xticks(np.linspace(-1, 2, 5)) plt.yticks([-2, -1.8, -1, 1.22, 3],[r'$really\ bad$', r'$bad$', r'$normal$', r'$good$', r'$really\ good$']) l1, = plt.plot(x, y1, label='linear line') # Set line sylesl2, = plt.plot(x, y2, color='red', linewidth=1.0, linestyle='--', label='square line')plt.legend(handles=[l1, l2], labels=['up', 'down'], loc='best') # Show the legendplt.show() Add annotation12345678910111213141516171819202122import matplotlib.pyplot as pltimport numpy as npx = np.linspace(-3, 3, 50)y = 2*x+1plt.figure()plt.plot(x, y)ax_info = plt.gca()ax_info.spines['right'].set_color('none')ax_info.spines['top'].set_color('none')ax_info.spines['top'].set_color('none')ax_info.xaxis.set_ticks_position('bottom')ax_info.spines['bottom'].set_position(('data', 0))ax_info.yaxis.set_ticks_position('left')ax_info.spines['left'].set_position(('data', 0))x0 = 1y0 = 2*x0+1plt.plot([x0, x0], [0, y0], linewidth=2, color='orange', linestyle='--')plt.scatter([x0], [y0], s=50, color='blue') # Set dot stylesplt.annotate(r'$2x+1=%s$' % y0, xy=(x0, y0), xycoords='data', xytext=(+30, -30), textcoords='offset points', fontsize=16, arrowprops=dict(arrowstyle='-&gt;', connectionstyle="arc3,rad=.2")) # Set annotationplt.text(-3.7, 3, r'$This\ is\ the\ some\ text.$', fontdict=&#123;'size': 16, 'color': 'red'&#125;) # Set text infomationplt.show() Drawing TypeScatter plot12345678910111213import matplotlib.pyplot as pltimport numpy as npn = 1024 # Data sizeX = np.random.normal(0, 1, n) # Normal distributionY = np.random.normal(0, 1, n) T = np.arctan2(Y,X) # Color valueplt.scatter(X, Y, s=75, c=T, alpha=.5) # Alpha = 50%plt.xlim(-1.5, 1.5)plt.xticks(()) # Ignore xticksplt.ylim(-1.5, 1.5)plt.yticks(())plt.show() Bar plotBasic bar1234567891011121314import matplotlib.pyplot as pltimport numpy as npn = 12X = np.arange(n)Y1 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n) # Uniform distributionY2 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n)plt.bar(X, +Y1)plt.bar(X, -Y2)plt.xlim(-0.5, n)plt.xticks(())plt.ylim(-1.25, 1.25)plt.yticks(())plt.show() Add color and data1234567891011121314151617181920import matplotlib.pyplot as pltimport numpy as npn = 12X = np.arange(n)Y1 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n) # Uniform distributionY2 = (1 - X / float(n)) * np.random.uniform(0.5, 1.0, n)plt.bar(X, +Y1)plt.bar(X, -Y2)plt.xlim(-0.5, n)plt.xticks(())plt.ylim(-1.25, 1.25)plt.yticks(())plt.bar(X, +Y1, facecolor='#9999ff', edgecolor='white')plt.bar(X, -Y2, facecolor='#ff9999', edgecolor='white')for x, y in zip(X, Y1): plt.text(x + 0.4, y + 0.05, '%.2f' % y, ha='center', va='bottom')for x, y in zip(X, Y2): plt.text(x + 0.4, -y - 0.05, '%.2f' % y, ha='center', va='top')plt.show() Contours plot12345678910111213141516import matplotlib.pyplot as pltimport numpy as npdef f(x,y): # The height function return (1 - x / 2 + x**5 + y**3) * np.exp(-x**2 -y**2)n = 256x = np.linspace(-3, 3, n)y = np.linspace(-3, 3, n)X,Y = np.meshgrid(x, y) # Set mesh grid.plt.contourf(X, Y, f(X, Y), 8, alpha=.75, cmap=plt.cm.hot) # Set color.C = plt.contour(X, Y, f(X, Y), 8, colors='black', linewidth=0.5) # Set lines.plt.clabel(C, inline=True, fontsize=10) # Add data value.plt.xticks(())plt.yticks(())plt.show() Image plot1234567891011import matplotlib.pyplot as pltimport numpy as npa = np.array([0.313660827978, 0.365348418405, 0.423733120134, 0.365348418405, 0.439599930621, 0.525083754405, 0.423733120134, 0.525083754405, 0.651536351379]).reshape(3,3)plt.imshow(a, interpolation='nearest', cmap='bone', origin='lower') # Show imageplt.colorbar(shrink=.92) # Add color barplt.xticks(())plt.yticks(())plt.show() 3D plot123456789101112131415import matplotlib.pyplot as pltimport numpy as npfrom mpl_toolkits.mplot3d import Axes3Dfig = plt.figure() # Create a figax = Axes3D(fig) # Set fig attributeX = np.arange(-4, 4, 0.25) Y = np.arange(-4, 4, 0.25)X, Y = np.meshgrid(X, Y) # Set mesh gridR = np.sqrt(X**2+Y**2)Z = np.sin(R) # Height valueax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.get_cmap('rainbow')) # draw the 3d plotax.contourf(X, Y, Z, zdir='z', offset=-2, cmap=plt.get_cmap('rainbow')) # draw the contourf ax.set_zlim(-2, 2)plt.show()]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Win10 Activation]]></title>
    <url>%2F2018%2F11%2F01%2FWin10-Activation%2F</url>
    <content type="text"><![CDATA[Win10 Activation Run the cmd.exe as an administrator cmd.exe Uninstall old product key slmgr.vbs /upk Install new product key slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX Set the key management service computer name slmgr /skms zh.us.to Activate Windows10 slmgr /ato]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[LeetCode] 3. Longest Substring Without Repeating Characters]]></title>
    <url>%2F2018%2F10%2F29%2FLeetCode-3-Longest-Substring-Without-Repeating-Characters%2F</url>
    <content type="text"><![CDATA[[Problem]Given a string, find the length of the longest substring without repeating characters. Example 1: Input: “abcabcbb”Output: 3Explanation: The answer is “abc”, with the length of 3.Example 2: Input: “bbbbb”Output: 1Explanation: The answer is “b”, with the length of 1.Example 3: Input: “pwwkew”Output: 3Explanation: The answer is “wke”, with the length of 3. Note that the answer must be a substring, “pwke” is a subsequence and not a substring. [Solution]12345678910111213141516class Solution &#123; public int lengthOfLongestSubstring(String s) &#123; if (s == null || s.length() == 0) return 0; Map&lt;Character, Integer&gt; map = new HashMap&lt;Character, Integer&gt;(); int maxLen = 0; for (int i = 0, j = 0; i &lt; s.length(); ++i) &#123; if (map.containsKey(s.charAt(i))) &#123; j = Math.max(j, map.get(s.charAt(i))+1); &#125; map.put(s.charAt(i), i); maxLen = Math.max(maxLen, i-j+1); &#125; return maxLen; &#125;&#125;]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Two Pointers</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[LeetCode] 2. Add Two Numbers]]></title>
    <url>%2F2018%2F10%2F28%2FLeetCode-2-Add-Two-Numbers%2F</url>
    <content type="text"><![CDATA[[Problem]You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Example: Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)Output: 7 -&gt; 0 -&gt; 8Explanation: 342 + 465 = 807. [Solution]1234567891011121314151617181920212223242526272829/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123; ListNode dummy = new ListNode(0); ListNode curr = dummy; int carry = 0; while (l1 != null || l2 != null || carry != 0) &#123; if (l1 != null) &#123; carry += l1.val; l1 = l1.next; &#125; if (l2 != null) &#123; carry += l2.val; l2 = l2.next; &#125; curr.next = new ListNode(carry%10); carry /= 10; curr = curr.next; &#125; return dummy.next; &#125;&#125;]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[LeetCode] 1. Two Sum]]></title>
    <url>%2F2018%2F10%2F27%2FLeetCode-1-Two-Sum%2F</url>
    <content type="text"><![CDATA[[Problem]Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1]. [Solution]1234567891011121314151617class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; int[] result = new int[2]; Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); for (int i = 0; i &lt; nums.length; ++i) &#123; if (map.containsKey(target-nums[i])) &#123; result[1] = i; result[0] = map.get(target-nums[i]); break; &#125; else &#123; map.put(nums[i], i); &#125; &#125; return result; &#125;&#125;]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
</search>
